{"version":3,"sources":["app/shared/ui/Spinner.tsx","app/earthquake/controller/earthquakeViewModel.ts","app/earthquake/domain/earthquakeModel.ts","app/earthquake/data/api/eathquakeAPIService.ts","app/earthquake/data/redux/earthquakeActionTypes.ts","app/earthquake/data/redux/earthquakeRepositoryImpl.ts","app/earthquake/data/redux/earthquakeActions.ts","app/earthquake/view/EarthquakeGridView.tsx","app/earthquake/view/EarthquakeGraphView.tsx","app/earthquake/view/EarthquakeView.tsx","app/earthquake/useCases/getEarthquakesUseCase.ts","app/earthquake/useCases/getEarthquakesFilterByDataUseCase.ts","app/earthquake/data/redux/earthquakeReducer.ts","app/main/data/redux/appRepositoryImplementation.ts","app/main/view/AppView.tsx","index.tsx"],"names":["SpinnerContainer","styled","div","Spinner","className","moment","locale","create","earthquake","date","latitude","longitude","depth","magnitude","agency","refGeography","dateUpdate","getEarthquakes","axios","get","data","earthquakes","map","Date","Fecha","Number","Latitud","Longitud","Profundidad","Magnitud","replace","Agencia","RefGeografica","FechaUpdate","GET_EARTHQUAKES","GET_EARTHQUAKES_SUCCESS","GET_EARTHQUAKES_FILTER_SUCCESS","earthquakeSelector","state","useEarthquakeRepositoryImplementation","useSelector","isLoading","filteredEarthquakes","dispatch","useDispatch","loadInitialEarthquakes","React","useCallback","type","actionTypes","getEarthquakeAction","filterByDataEarthquakes","firstAttribute","secondAttribute","getEarthquakeFilterByDataAction","EarthquakeGridView","values","attributes","columns","search","pagination","enabled","limit","container","css","table","th","td","EarthquakeGraphView","labels","filteredEarthquakesFirst","datasets","label","filteredEarthquakesSecond","fill","backgroundColor","borderColor","EarthquakeView","repository","getEarthquakesUseCase","getEarthquakesFilterByData","getEarthquakesFilterByDataUseCase","undefined","sort","b","a","getTime","tz","format","earthquakesValues","earthquakeGrid","ReferenciaGeografica","Object","earthquakesAttributes","useEarthquakeViewModel","useEffect","Button","onClick","INITIAL_STATE","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","appRepositoryImplementation","createStore","applyMiddleware","thunk","AppView","store","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.e227951b.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SpinnerContainer = styled.div`\n  position: relative;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  div {\n    width: 6%;\n    height: 16%;\n    position: absolute;\n    left: 49%;\n    top: 43%;\n    opacity: 0;\n    border-radius: 50px;\n    animation: fade 1s linear infinite;\n    background: #4a4a4a;\n\n    &.bar1 {\n      transform: rotate(0deg) translate(0, -130%);\n      animation-delay: 0s;\n    }\n\n    &.bar2 {\n      transform: rotate(30deg) translate(0, -130%);\n      animation-delay: -0.9167s;\n    }\n\n    &.bar3 {\n      transform: rotate(60deg) translate(0, -130%);\n      animation-delay: -0.833s;\n    }\n\n    &.bar4 {\n      transform: rotate(90deg) translate(0, -130%);\n      animation-delay: -0.7497s;\n    }\n    &.bar5 {\n      transform: rotate(120deg) translate(0, -130%);\n      animation-delay: -0.667s;\n    }\n    &.bar6 {\n      transform: rotate(150deg) translate(0, -130%);\n      animation-delay: -0.5837s;\n    }\n    &.bar7 {\n      transform: rotate(180deg) translate(0, -130%);\n      animation-delay: -0.5s;\n    }\n    &.bar8 {\n      transform: rotate(210deg) translate(0, -130%);\n      animation-delay: -0.4167s;\n    }\n    &.bar9 {\n      transform: rotate(240deg) translate(0, -130%);\n      animation-delay: -0.333s;\n    }\n    &.bar10 {\n      transform: rotate(270deg) translate(0, -130%);\n      animation-delay: -0.2497s;\n    }\n    &.bar11 {\n      transform: rotate(300deg) translate(0, -130%);\n      animation-delay: -0.167s;\n    }\n    &.bar12 {\n      transform: rotate(330deg) translate(0, -130%);\n      animation-delay: -0.0833s;\n    }\n  }\n\n  @keyframes fade {\n    from {\n      opacity: 1;\n    }\n    to {\n      opacity: 0.25;\n    }\n  }\n`;\n\nconst Spinner = (): JSX.Element => {\n  return (\n    <SpinnerContainer>\n      <div className=\"bar1\" />\n      <div className=\"bar2\" />\n      <div className=\"bar3\" />\n      <div className=\"bar4\" />\n      <div className=\"bar5\" />\n      <div className=\"bar6\" />\n      <div className=\"bar7\" />\n      <div className=\"bar8\" />\n      <div className=\"bar9\" />\n      <div className=\"bar10\" />\n      <div className=\"bar11\" />\n      <div className=\"bar12\" />\n    </SpinnerContainer>\n  );\n};\n\nexport default Spinner;\n","import React from \"react\";\n\nimport type { EarthquakeRepository } from \"../domain/earthquakeRepository\";\nimport { getEarthquakesUseCase } from \"../useCases/getEarthquakesUseCase\";\nimport { EarthquakeGridEntity } from \"./earthquakeGridEntity\";\nimport { getEarthquakesFilterByDataUseCase } from \"../useCases/getEarthquakesFilterByDataUseCase\";\nimport { EarthquakeTypes } from \"../domain/earthquakeEntity\";\nimport moment from \"moment-timezone\";\nimport \"moment/locale/es\";\nmoment.locale(\"es\");\n\n// Dependency injection (repository)\nfunction useEarthquakeViewModel(repository: EarthquakeRepository) {\n  const getEarthquakes = React.useCallback(\n    function () {\n      getEarthquakesUseCase({\n        loadInitialEarthquakes: repository.loadInitialEarthquakes,\n      });\n    },\n    [repository.loadInitialEarthquakes]\n  );\n\n  const getEarthquakesFilterByData = React.useCallback(\n    function (\n      firstAttribute: EarthquakeTypes,\n      secondAttribute: EarthquakeTypes\n    ) {\n      getEarthquakesFilterByDataUseCase(\n        {\n          filterByDataEarthquakes: repository.filterByDataEarthquakes,\n          earthquakes: repository.earthquakes,\n        },\n        firstAttribute,\n        secondAttribute\n      );\n    },\n    [repository.filterByDataEarthquakes, repository.earthquakes]\n  );\n\n  return {\n    earthquakes: repository.earthquakes,\n    isLoading: repository.earthquakes === undefined || repository.isLoading,\n    getEarthquakes,\n    getEarthquakesFilterByData,\n    filteredEarthquakes: repository.filteredEarthquakes,\n    filteredEarthquakesFirst: repository.filteredEarthquakes\n      ? repository.filteredEarthquakes\n          .sort((b, a) => b.date.getTime() - a.date.getTime())\n          .map((earthquake) => {\n            return moment(earthquake.date)\n              .tz(\"America/Santiago\")\n              .format(\"Do MMMM YYYY, h:mm:ss\");\n          })\n      : [],\n    filteredEarthquakesSecond: repository.filteredEarthquakes\n      ? repository.filteredEarthquakes\n          .sort((b, a) => b.date.getTime() - a.date.getTime())\n          .map((earthquake) => {\n            return earthquake.depth;\n          })\n      : [],\n    earthquakesValues: repository.earthquakes\n      ? repository.earthquakes.map((earthquake) => {\n          let earthquakeGrid: EarthquakeGridEntity = {\n            Fecha: moment(earthquake.date)\n              .tz(\"America/Santiago\")\n              .format(\"Do MMMM YYYY, h:mm:ss\"),\n            Profundidad: earthquake.depth,\n            Magnitud: earthquake.magnitude,\n            ReferenciaGeografica: earthquake.refGeography,\n          };\n          return Object.values(earthquakeGrid);\n        })\n      : [],\n    earthquakesAttributes: [\n      \"Fecha (Hora Santiago/Chile)\",\n      \"Profundidad\",\n      \"Magnitud M1\",\n      \"Referencia Geografica\",\n    ],\n  };\n}\n\nexport { useEarthquakeViewModel };\n","import type { Earthquake } from \"./earthquakeEntity\";\n\n// Create\nconst create = (earthquake: Earthquake) => ({\n  date: earthquake.date,\n  latitude: earthquake.latitude,\n  longitude: earthquake.longitude,\n  depth: earthquake.depth,\n  magnitude: earthquake.magnitude,\n  agency: earthquake.agency,\n  refGeography: earthquake.refGeography,\n  dateUpdate: earthquake.dateUpdate,\n});\n\n// Method or Bussines Logic Entity\n\nexport { create };\n","import axios from \"axios\";\nimport type { Earthquake } from \"../../domain/earthquakeEntity\";\nimport { create } from \"../../domain/earthquakeModel\";\nimport { EarthquakeAPIEntity } from \"./earthquakeAPIEntity\";\n\nasync function getEarthquakes(): Promise<Earthquake[]> {\n  let earthquakes: Earthquake[];\n  try {\n    const { data }: { data: EarthquakeAPIEntity[] } = await axios.get(\n      \"https://api.gael.cloud/general/public/sismos\"\n    );\n\n    earthquakes = data.map((earthquake) => {\n      return create({\n        date: new Date(earthquake.Fecha),\n        latitude: Number(earthquake.Latitud),\n        longitude: Number(earthquake.Longitud),\n        depth: Number(earthquake.Profundidad),\n        magnitude: Number(earthquake.Magnitud.replace(/\\D/g, \"\")),\n        agency: earthquake.Agencia,\n        refGeography: earthquake.RefGeografica,\n        dateUpdate: new Date(earthquake.FechaUpdate),\n      });\n    });\n\n    return earthquakes;\n  } catch (error) {\n    return [];\n  }\n}\n\n\nexport { getEarthquakes };\n","export const GET_EARTHQUAKES = \"GET_EARTHQUAKES\";\nexport const GET_EARTHQUAKES_SUCCESS = \"GET_EARTHQUAKES_SUCCESS\";\nexport const GET_EARTHQUAKES_FILTER_SUCCESS = \"GET_EARTHQUAKES_FILTER_SUCCESS\";\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport type { AppRootState } from \"../../../main/data/redux/appRepositoryImplementation\";\nimport type { EarthquakeRepository } from \"../../domain/earthquakeRepository\";\nimport { Earthquake, EarthquakeTypes } from \"../../domain/earthquakeEntity\";\nimport type { EarthquakeRepositoryState } from \"./earthquakeReducer\";\nimport {\n  getEarthquakeAction,\n  getEarthquakeFilterByDataAction,\n} from \"./earthquakeActions\";\n\nconst earthquakeSelector = (state: AppRootState) => state.earthquake;\n\nconst useEarthquakeRepositoryImplementation = (): EarthquakeRepository => {\n  const { earthquakes, isLoading, filteredEarthquakes } = useSelector<\n    AppRootState,\n    EarthquakeRepositoryState\n  >(earthquakeSelector);\n  const dispatch = useDispatch();\n\n  const loadInitialEarthquakes = React.useCallback(\n    () => getEarthquakeAction()(dispatch),\n    [dispatch]\n  );\n\n  const filterByDataEarthquakes = React.useCallback(\n    (\n      earthquakes: Earthquake[],\n      firstAttribute: EarthquakeTypes,\n      secondAttribute: EarthquakeTypes\n    ) =>\n      getEarthquakeFilterByDataAction(\n        earthquakes,\n        firstAttribute,\n        secondAttribute\n      )(dispatch),\n    [dispatch]\n  );\n\n  return {\n    earthquakes,\n    isLoading,\n    filteredEarthquakes,\n    loadInitialEarthquakes,\n    filterByDataEarthquakes,\n  };\n};\n\nexport { useEarthquakeRepositoryImplementation };\n","import type {\n  Earthquake,\n  EarthquakeTypes,\n} from \"../../domain/earthquakeEntity\";\nimport { getEarthquakes } from \"../api/eathquakeAPIService\";\nimport * as actionTypes from \"./earthquakeActionTypes\";\n\nconst getEarthquakeAction = () => async (dispatch: any) => {\n  dispatch({ type: actionTypes.GET_EARTHQUAKES });\n\n  //Action\n  const earthquakes = await getEarthquakes();\n\n  dispatch({ type: actionTypes.GET_EARTHQUAKES_SUCCESS, earthquakes });\n  return earthquakes;\n};\n\nconst getEarthquakeFilterByDataAction =\n  (\n    earthquakes: Earthquake[],\n    firstAttribute: EarthquakeTypes,\n    secondAttribute: EarthquakeTypes\n  ) =>\n  async (dispatch: any) => {\n    //Action\n    dispatch({\n      type: actionTypes.GET_EARTHQUAKES_FILTER_SUCCESS,\n      filteredEarthquakes: earthquakes.map((earthquake) => {\n        return {\n          [firstAttribute]: earthquake[firstAttribute],\n          [secondAttribute]: earthquake[secondAttribute],\n        };\n      }),\n    });\n\n    return [earthquakes[0]];\n  };\n\nexport { getEarthquakeAction, getEarthquakeFilterByDataAction };\n","import { Grid } from \"gridjs-react\";\r\nimport \"gridjs/dist/theme/mermaid.css\";\r\nimport { css } from \"@emotion/css\";\r\n\r\nconst EarthquakeGridView = ({\r\n  values,\r\n  attributes,\r\n}: {\r\n  values: string[][];\r\n  attributes: string[];\r\n}) => {\r\n  return (\r\n    <Grid\r\n      data={values}\r\n      columns={attributes}\r\n      search={true}\r\n      pagination={{\r\n        enabled: true,\r\n        limit: 6,\r\n      }}\r\n      className={{\r\n        container: css`\r\n          * {\r\n            font-family: \"Tahoma\";\r\n          }\r\n        `,\r\n        table: css`\r\n          tr:hover td {\r\n            background-color: rgba(0, 0, 0, 0.1);\r\n          }\r\n        `,\r\n        th: css`\r\n          text-align: center;\r\n          background-color: rgba(0, 0, 0, 0.9);\r\n          &:hover {\r\n            background-color: #999;\r\n            color: #fff;\r\n          }\r\n        `,\r\n        td: css`\r\n          color: rgba(0, 0, 0, 0.9);\r\n          &:hover {\r\n            color: #000;\r\n          }\r\n        `,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EarthquakeGridView;\r\n","import { Line } from \"react-chartjs-2\";\r\n\r\nconst EarthquakeGraphView = ({\r\n  filteredEarthquakesFirst,\r\n  filteredEarthquakesSecond,\r\n}: {\r\n  filteredEarthquakesFirst: String[];\r\n  filteredEarthquakesSecond: number[];\r\n}) => {\r\n  const data = {\r\n    labels: filteredEarthquakesFirst,\r\n    datasets: [\r\n      {\r\n        label: \"Profundidad Sismo M1\",\r\n        data: filteredEarthquakesSecond,\r\n        fill: true,\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        borderColor: \"rgba(75,192,192,1)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return <Line data={data} />;\r\n};\r\n\r\nexport default EarthquakeGraphView;\r\n","import React from \"react\";\n\nimport Spinner from \"../../shared/ui/Spinner\";\n\nimport { useEarthquakeViewModel } from \"../controller/earthquakeViewModel\";\nimport { useEarthquakeRepositoryImplementation } from \"../data/redux/earthquakeRepositoryImpl\";\n\nimport { Grid } from \"gridjs-react\";\nimport \"gridjs/dist/theme/mermaid.css\";\nimport EarthquakeGridView from \"./EarthquakeGridView\";\nimport { Button } from \"react-bootstrap\";\nimport EarthquakeGraphView from \"./EarthquakeGraphView\";\n\nconst EarthquakeView = () => {\n  const repository = useEarthquakeRepositoryImplementation();\n  const {\n    isLoading,\n    getEarthquakes,\n    earthquakesAttributes,\n    earthquakesValues,\n    getEarthquakesFilterByData,\n    filteredEarthquakesFirst,\n    filteredEarthquakesSecond,\n  } = useEarthquakeViewModel(repository);\n\n  React.useEffect(() => {\n    getEarthquakes();\n  }, [getEarthquakes]);\n\n  return (\n    <div className=\"App\">\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <>\n          <div className=\"container\">\n            {\" \"}\n            <div className=\"row\">\n              <div className=\"col\">\n                <EarthquakeGridView\n                  values={earthquakesValues}\n                  attributes={earthquakesAttributes}\n                ></EarthquakeGridView>\n              </div>\n            </div>\n            <div className=\"row \">\n              <div className=\"col\">\n                <Button\n                  onClick={() => {\n                    getEarthquakesFilterByData(\"date\", \"depth\");\n                  }}\n                  className={\n                    \"py-2 mb-4 px-4 border rounded-md text-white bg-blue-600\"\n                  }\n                >\n                  Agregar Grafico Profundidad vs Fecha\n                </Button>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                {filteredEarthquakesFirst && filteredEarthquakesSecond && (\n                  <EarthquakeGraphView\n                    filteredEarthquakesFirst={filteredEarthquakesFirst}\n                    filteredEarthquakesSecond={filteredEarthquakesSecond}\n                  ></EarthquakeGraphView>\n                )}\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default EarthquakeView;\n","import type { EarthquakeRepository } from \"../domain/earthquakeRepository\";\n\ntype getEarthquakeRepository = Pick<EarthquakeRepository, \"loadInitialEarthquakes\">;\n\nconst getEarthquakesUseCase = (repository: getEarthquakeRepository) => {\n  repository.loadInitialEarthquakes();\n};\n\nexport { getEarthquakesUseCase };\n","import {  EarthquakeTypes } from \"../domain/earthquakeEntity\";\nimport type { EarthquakeRepository } from \"../domain/earthquakeRepository\";\n\ntype getEarthquakeRepository = Pick<\n  EarthquakeRepository,\n  \"filterByDataEarthquakes\" | \"earthquakes\"\n>;\n\nconst getEarthquakesFilterByDataUseCase = (\n  repository: getEarthquakeRepository,\n  firstAttribute: EarthquakeTypes,\n  secondAttribute: EarthquakeTypes\n) => {\n  if (repository.earthquakes) {\n    repository.filterByDataEarthquakes(\n      repository.earthquakes,\n      firstAttribute,\n      secondAttribute\n    );\n  }\n};\n\nexport { getEarthquakesFilterByDataUseCase };\n","import type { AnyAction } from \"redux\";\nimport type { EarthquakeRepository } from \"../../domain/earthquakeRepository\";\nimport * as actionTypes from \"./earthquakeActionTypes\";\n\ntype EarthquakeRepositoryState = Omit<\n  EarthquakeRepository,\n  \"loadInitialEarthquakes\" | \"filterByDataEarthquakes\"\n>;\n\nconst INITIAL_STATE: EarthquakeRepositoryState = {\n  earthquakes: undefined,\n  isLoading: false,\n  filteredEarthquakes: undefined,\n};\n\nconst earthquakeReducer = (\n  state: EarthquakeRepositoryState = INITIAL_STATE,\n  action: AnyAction\n) => {\n  switch (action.type) {\n    case actionTypes.GET_EARTHQUAKES:\n      return { ...state, isLoading: true };\n    case actionTypes.GET_EARTHQUAKES_SUCCESS:\n      return { ...state, isLoading: false, earthquakes: action.earthquakes };\n    case actionTypes.GET_EARTHQUAKES_FILTER_SUCCESS:\n      return { ...state, filteredEarthquakes: action.filteredEarthquakes };\n    default:\n      return state;\n  }\n};\n\nexport { earthquakeReducer };\nexport type { EarthquakeRepositoryState };\n","import { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { earthquakeReducer } from \"../../../earthquake/data/redux/earthquakeReducer\";\n\nconst rootReducer = combineReducers({\n  earthquake: earthquakeReducer,\n});\n\ninterface ExtendedWindow extends Window {\n  __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n}\ndeclare var window: ExtendedWindow;\n\nconst composeEnhancers =\n  (typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst appRepositoryImplementation = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\ntype AppRootState = ReturnType<typeof appRepositoryImplementation.getState>;\n\nexport { appRepositoryImplementation };\nexport type { AppRootState };\n","import { Provider } from \"react-redux\";\nimport EarthquakeView from \"../../earthquake/view/EarthquakeView\";\n\nimport { appRepositoryImplementation } from \"../data/redux/appRepositoryImplementation\";\n\nfunction AppView() {\n  return (\n    <Provider store={appRepositoryImplementation}>\n      <EarthquakeView />\n    </Provider>\n  );\n}\n\nexport default AppView;\n","import { render } from \"react-dom\";\n\nimport \"./styles.css\";\nimport AppView from \"./app/main/view/AppView\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst rootElement = document.getElementById(\"root\");\nrender(<AppView />, rootElement);\n"],"sourceRoot":""}